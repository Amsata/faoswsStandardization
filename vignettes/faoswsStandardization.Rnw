%\VignetteIndexEntry{faoswsStandardization: A package for the standardization of commodity trees in the Statistical Working System}
%\VignetteEngine{knitr::knitr}
\documentclass[nojss]{jss}
\usepackage{url}
\usepackage[sc]{mathpazo}
\usepackage{geometry}
\geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}
\setcounter{secnumdepth}{2}
\setcounter{tocdepth}{2}
\usepackage{breakurl}
\usepackage{hyperref}
\usepackage[ruled, vlined]{algorithm2e}
\usepackage{mathtools}
\usepackage{draftwatermark}
\usepackage{float}
\usepackage{placeins}
\usepackage{mathrsfs}
\usepackage{multirow}
%% \usepackage{mathbbm}
\DeclareMathOperator{\sgn}{sgn}
\DeclareMathOperator*{\argmax}{\arg\!\max}

\title{\bf faoswsStandardization: A package for the standardization of commodity trees in the Statistical Working System}

\author{Joshua M. Browning\\ Food and Agriculture
    Organization \\ of the United Nations\\}

\Plainauthor{Joshua M. Browning}

\Plaintitle{faoswsStandardization: Package for Commodity Tree Standardization}

\Shorttitle{Standardization Module}

\Keywords{Standardization, Commodity Trees}
\Plainkeywords{Standardization, Commodity Trees}

\Address{
  Joshua M. Browning\\
  Economics and Social Statistics Division (ESS)\\
  Economic and Social Development Department (ES)\\
  Food and Agriculture Organization of the United Nations (FAO)\\
  Viale delle Terme di Caracalla 00153 Rome, Italy\\
  E-mail: \email{joshua.browning@fao.org}\\
  URL: \url{https://github.com/SWS-Methodology/sws_standardization}
}


\begin{document}

<<echo=FALSE>>=
if (!exists("faoswsStandardization", .GlobalEnv)) library(faoswsStandardization)
# In devel won't call library, but R CMD build/check will.
@

\begin{section}

The term ``standardization'' is used within the FAO to refer to the process of taking a commodity tree and aggregating (or disaggregating) commodities to the parents/children.  For example, we have a wheat commodity tree: wheat is processed into flour, bran, and germ.  Wheat flour is in turn processed into bread, pastries, etc. and so we have a complex tree structure.  We don't wish to create food balance sheets for all of these commodities as we have very little data availability, yet we need to account for these commodities when they are available.  Thus, we standardize data on child commodities up to parent commodities.

In most cases, we only have trade data available for the children commodities.  Production is generally available only at the top level (for example, wheat) and the other elements of the balance (i.e. seed, feed, etc.) are extremely sparse and also generally available at the top level only.

Thus, to create a food balance sheet, we need to standardize detailed trade data (i.e. how many pretzels Mexico imported from Germany, how much mozzarella the US imported from Italy, etc.) into higher levels.  We choose to generally standardize to the first processing level (for example wheat flour) as the extraction rates from the raw commodities to the first processed level should be fairly reliable and because we usually have differing utilizations at this point (wheat flour goes to food while most wheat bran goes to feed).  So, we will take production, feed, seed, food, etc. and ``roll it down'' to the first processed level while we'll ``roll up'' trade data to the first processed level.  Then, we can balance our food balance equation.

One further complication is that trade data is reported in HS (harmonized system) commodity codes while all other elements are reported in CPC (central product classification).  Thus, we must first convert the trade data into CPC codes, standardize it, and then it will be comparable to the other elements of the food balance.

<<setup, include=FALSE, cache=FALSE>>=
library(knitr)
library(ggplot2)
library(gridExtra)
library(faosws)
library(faoswsUtil)
library(data.table)
opts_chunk$set(fig.path='figure/', fig.align='center', fig.show='hold',
               warning=FALSE, message=FALSE, error=FALSE, tidy=FALSE, 
               results='markup', eval=TRUE, echo=TRUE, cache=FALSE, dpi=200)
options(replace.assign=TRUE,width=80)
assign("depthtrigger", 10, data.table:::.global)
SetClientFiles("~/R certificate files/QA/")
GetTestEnvironment(
    baseUrl = "https://hqlqasws1.hq.un.fao.org:8181/sws",
    token = "bed251c6-3ecd-48aa-8e23-74e10ad92577"
)
@ 

\section{Getting Commodity Trees}

\subsection{Pulling data from the system}

Historic commodity trees in FCL (FAO commodity list) codes are available in the system, but they are problematic in that extraction rates were adjustable by the analyst.  Thus, some extraction rates are much too extreme, and so we must work to move all historic extraction rates to meaningful values in our new trees.  Additionally, we must convert the FCL trees into CPC trees, as these codes are what we need for the other elemnts of the FBS.

The first function to use, then, is a function pulling historic commodity trees.  The \texttt{getCommodityTree} function fro \texttt{faoswsUtil} does this rather easily, requiring the user to simply put in countries/years of interest:

<<>>=
tree = getCommodityTree(timePointYears = c("2010", "2011", "2012"))
tree
@

This function works by pulling the relevant data from the shares and ratios data.table (from the old system) and merging them together.

\subsection{Correcting Extraction Rates}

Historic extraction rates were often adjusted and tuned inappropriately, and the new approach should try to use the meaningful information available while fixing and correcting the errors.  A function to remove the extreme values exists in this standardization package, and it's called \texttt{adjustCommodityTree}:

<<>>=
adjustedTree = adjustCommodityTree(commodityTree = copy(tree), nSigma = 1.5,
                                   parentColname = "measuredItemParentCPC",
                                   childColname = "measuredItemChildCPC")
@

Let's look at the extraction rates for tapioca of potatoes (CPC code 23230.01) and oil of olive residues (CPC code 21673):

<<fig = TRUE, echo = FALSE>>=
tapioca = "23230.01"
toPlotOld = tree[measuredItemChildCPC == tapioca, ]
toPlotOld[, treeType := "Original"]
toPlotNew = adjustedTree[measuredItemChildCPC == tapioca, ]
toPlotNew[, treeType := "New"]
toPlot = rbind(toPlotOld, toPlotNew)
ggplot(toPlot, aes(x = extractionRate)) +
    geom_bar() + facet_grid(treeType ~ .) +
    labs(title = "Tapioca of Potatoes")
@

<<fig = TRUE, echo = FALSE>>=
oliveResidue = "21673"
toPlotOld = tree[measuredItemChildCPC == oliveResidue, ]
toPlotOld[, treeType := "Original"]
toPlotNew = adjustedTree[measuredItemChildCPC == oliveResidue, ]
toPlotNew[, treeType := "New"]
toPlot = rbind(toPlotOld, toPlotNew)
ggplot(toPlot, aes(x = extractionRate)) +
    geom_bar() + facet_grid(treeType ~ .) +
    labs(title = "Oil of Olive Residues")
@

\section{Collecting the data}

Next, we'll grab a subset of the data.  Note that this data is being pulled from the SUA table in the suafbs domain.  This table must be filled by running the Import SUA module (which goes to the agriculture production, trade and tourist domains and pulls data into the SUA domain).  The below query shows how to extract all the SUA data:

<<eval=FALSE>>=
areaKeys = GetCodeList(domain = "suafbs", dataset = "sua", "geographicAreaM49")
areaKeys = areaKeys[type == "country", code]
elemKeys = GetCodeTree(domain = "suafbs", dataset = "sua", "measuredElementSuaFbs")
elemKeys = elemKeys[parent %in% c("51", "61", "71", "91", "101", "111", "121", "131"),
                    paste0(children, collapse = ", ")]
elemKeys = strsplit(elemKeys, ", ")[[1]]
itemKeys = GetCodeList(domain = "suafbs", dataset = "sua", "measuredItemSuaFbs")
itemKeys = itemKeys[, code]
key = DatasetKey(domain = "suafbs", dataset = "sua", dimensions = list(
    geographicAreaM49 = Dimension(name = "geographicAreaM49", keys = areaKeys),
    measuredElementSuaFbs = Dimension(name = "measuredElementSuaFbs", keys = elemKeys),
    measuredItemSuaFbs = Dimension(name = "measuredItemSuaFbs", keys = itemKeys),
    timePointYears = Dimension(name = "timePointYears", keys = "2012")
))
data = GetData(key)
@

However, this data is not very useful for this vignette, as it is very large and also because it will change.  Thus, we will instead use data pulled from the working system at one point in time and saved in this package.  Here's what the data looks like:

<<echo=FALSE, eval=FALSE>>=
# Not shown in vignette, but this is how the saved dataset was generated.
elemKeys = GetCodeTree(domain = "suafbs", dataset = "sua", "measuredElementSuaFbs")
elemKeys = elemKeys[parent %in% c("51", "61", "71", "91", "101", "111", "121", "131"),
                    paste0(children, collapse = ", ")]
elemKeys = strsplit(elemKeys, ", ")[[1]]

# Get all commodities that are in the wheat tree
itemKeys = "0111"
allDescendants = getDescendants(
    tree = unique(tree[, list(measuredItemParentCPC, measuredItemChildCPC)]),
    parentColname = "measuredItemParentCPC",
    childColname = "measuredItemChildCPC")
wheatCodes = allDescendants[measuredItemParentCPC == "0111", 
                            measuredItemChildCPC]
wheatCodes = c("0111", wheatCodes)

key = DatasetKey(domain = "suafbs", dataset = "sua", dimensions = list(
    geographicAreaM49 = Dimension(name = "geographicAreaM49", keys = "840"),
    measuredElementSuaFbs = Dimension(name = "measuredElementSuaFbs", keys = elemKeys),
    measuredItemSuaFbs = Dimension(name = "measuredItemSuaFbs", keys = wheatCodes),
    timePointYears = Dimension(name = "timePointYears", keys = "2011")
))
usaWheat = GetData(key)
save(usaWheat, file = "~/Documents/Github/faoswsStandardization/usaWheat.RData")
@

<<>>=
usaWheat
@

We can now begin with the standardization for this dataset.  The first step is to convert the element/variable codes to standardized names.  We do this because there are many different element/variable codes for one particular element/variable (for example, we can have production in tons, kgs, heads, etc.).  To simplify the code, we perform this conversion to a standardized value so that we don't have to iterate through all the various possible codes.

<<>>=
usaWheat = elementCodesToNames(data = usaWheat,
    elementCol = "measuredElementSuaFbs", itemCol = "measuredItemSuaFbs")
usaWheat
@

The final dataset that we need is the nutrient data.  This data was historically contained in the Ratios table with country/year specific ratios, country specific ratios, and generic ratios.  To easily extract this data, simply call the \texttt{faoswsUtil::getNutritiveFactors} function.

<<>>=
nutrientData = getNutritiveFactors(measuredElement = c("1001", "1003", "1005"),
                                   timePointYears = "2012")
nutrientData
@

\section{Running the standardization}

The main function performing the standardization is \texttt{standardizationWrapper}:

<<>>=
params = defaultStandardizationParameters()
params$itemVar = "measuredItemSuaFbs"
params$elementVar = "measuredElementSuaFbs"
standardizationWrapper(data = usaWheat, tree = tree,
                       standParams = params, nutrientData = nutrientData)
@

\end{document}
